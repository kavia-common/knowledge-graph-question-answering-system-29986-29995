{"is_source_file": true, "format": "Python", "description": "This file provides NLP mapping utilities that convert natural language questions into Cypher queries for a knowledge graph about persons, especially Sachin Tendulkar. It defines data classes, rule-based pattern matching, and functions to generate appropriate Cypher queries based on the input question.", "external_files": ["dataclasses", "typing"], "external_methods": ["dataclasses.dataclass"], "published": ["CypherQuery", "RuleBasedNLPMappings"], "classes": [{"name": "CypherQuery", "description": "Represents a Cypher query string and associated parameters."}, {"name": "RuleBasedNLPMappings", "description": "A class implementing rules to map specific NL questions to Cypher queries, especially tailored for questions about Sachin Tendulkar."}], "methods": [{"name": "List[str] _normalize_person_input(self, person: str)", "description": "Generates possible name variants for a person input for robust matching in Cypher queries.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "str _person_where_clause(self, field: str = \"p\")", "description": "Constructs a Cypher WHERE clause to match a Person node by name, full_name, or nickname, case-insensitive, supporting list-based matching.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "get_cypher_query", "description": "Main method that takes a natural language question and returns a corresponding CypherQuery object if a supported pattern matches."}, {"name": "Optional[str] _extract_format(text: str)", "scope": "RuleBasedNLPMappings._person_where_clause", "scopeKind": "member", "description": "unavailable"}], "calls": ["self._normalize_person_input", "self._person_where_clause", "CypherQuery", "self.get_cypher_query"], "search-terms": ["nlp_mapping", "Sachin Tendulkar queries", "question to Cypher", "rule-based NLP", "sports knowledge graph"], "state": 2, "file_id": 20, "knowledge_revision": 85, "git_revision": "d393cb1f25020c0e36df0952242462e273e9b77f", "revision_history": [{"41": ""}, {"54": ""}, {"57": "bf534d804d74f8d170c146a9e8434bd403e19fff"}, {"63": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"64": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"65": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"66": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"67": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"68": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"69": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"70": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"71": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"72": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"73": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"74": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"75": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"76": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"77": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"78": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"79": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"80": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"81": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"82": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"83": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"84": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"85": "d393cb1f25020c0e36df0952242462e273e9b77f"}], "ctags": [{"_type": "tag", "name": "CypherQuery", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class CypherQuery:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RuleBasedNLPMappings", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class RuleBasedNLPMappings:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_extract_format", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^        def _extract_format(text: str) -> Optional[str]:$/", "file": true, "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(text: str)", "scope": "RuleBasedNLPMappings._person_where_clause", "scopeKind": "member"}, {"_type": "tag", "name": "_normalize_person_input", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _normalize_person_input(self, person: str) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "member", "signature": "(self, person: str)", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"_type": "tag", "name": "_person_where_clause", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _person_where_clause(self, field: str = \"p\") -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, field: str = \"p\")", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}], "hash": "802de5b79c6054cb4d1722ce4ea2472d", "format-version": 4, "code-base-name": "question_answering_backend", "filename": "question_answering_backend/api/nlp_mapping.py"}