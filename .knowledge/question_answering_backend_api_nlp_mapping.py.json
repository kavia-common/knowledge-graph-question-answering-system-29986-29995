{"is_source_file": true, "format": "Python", "description": "This file contains utility classes and functions for mapping natural language questions to Cypher queries in a simple rule-based manner. It also includes a Neo4j service wrapper for database connection handling and query execution.", "external_files": ["neo4j"], "external_methods": ["neo4j.GraphDatabase.driver", "neo4j.Session.run"], "published": ["CypherQuery", "RuleBasedNLPMappings", "neo4j_service"], "classes": [{"name": "CypherQuery", "description": "Represents a Cypher query with query string and parameters."}, {"name": "RuleBasedNLPMappings", "description": "A simple rules engine to map natural language questions to Cypher queries."}, {"name": "Neo4jService", "description": "Handles connecting to Neo4j database and executing Cypher queries safely."}], "methods": [{"name": "Optional[CypherQuery] map_question(self, question: str, top_k: int = 10)", "description": "Maps a natural language question to a CypherQuery object based on predefined patterns.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "Dict[str,str] _get_settings(self)", "description": "Reads Neo4j connection settings from environment variables.", "scope": "Neo4jService", "scopeKind": "class"}, {"name": "Driver _ensure_driver(self)", "description": "Ensures the Neo4j driver is initialized.", "scope": "Neo4jService", "scopeKind": "class"}, {"name": "Session _session(self)", "description": "Creates a new database session.", "scope": "Neo4jService", "scopeKind": "class"}, {"name": "List[Dict[str,Any]] run_cypher(self, query: str, parameters: Optional[Dict[str, Any]] = None)", "description": "Executes a Cypher query against the database and returns results as a list of dicts.", "scope": "Neo4jService", "scopeKind": "class"}, {"name": "None close(self)", "description": "Closes the Neo4j driver connection.", "scope": "Neo4jService", "scopeKind": "class"}, {"name": "None __init__(self)", "scope": "Neo4jService", "scopeKind": "class", "description": "unavailable"}], "calls": ["neo4j.GraphDatabase.driver", "session.run", "session.close"], "search-terms": ["CypherQuery", "RuleBasedNLPMappings", "Neo4jService", "map_question", "run_cypher", "neo4j"], "state": 2, "file_id": 20, "knowledge_revision": 54, "git_revision": "", "revision_history": [{"41": ""}, {"54": ""}], "ctags": [{"_type": "tag", "name": "CypherQuery", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class CypherQuery:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "Neo4jService", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class Neo4jService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RuleBasedNLPMappings", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class RuleBasedNLPMappings:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "Neo4jService", "scopeKind": "class"}, {"_type": "tag", "name": "_ensure_driver", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _ensure_driver(self) -> Driver:$/", "language": "Python", "typeref": "typename:Driver", "kind": "member", "signature": "(self)", "scope": "Neo4jService", "scopeKind": "class"}, {"_type": "tag", "name": "_get_settings", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _get_settings(self) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self)", "scope": "Neo4jService", "scopeKind": "class"}, {"_type": "tag", "name": "_session", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _session(self) -> Session:$/", "language": "Python", "typeref": "typename:Session", "kind": "member", "signature": "(self)", "scope": "Neo4jService", "scopeKind": "class"}, {"_type": "tag", "name": "close", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def close(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "Neo4jService", "scopeKind": "class"}, {"_type": "tag", "name": "map_question", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def map_question(self, question: str, top_k: int = 10) -> Optional[CypherQuery]:$/", "language": "Python", "typeref": "typename:Optional[CypherQuery]", "kind": "member", "signature": "(self, question: str, top_k: int = 10)", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"_type": "tag", "name": "neo4j_service", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^neo4j_service = Neo4jService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_cypher", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def run_cypher(self, query: str, parameters: Optional[Dict[str, Any]] = None) -> List[Dict[s/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self, query: str, parameters: Optional[Dict[str, Any]] = None)", "scope": "Neo4jService", "scopeKind": "class"}], "hash": "741702c7fcce5b76ffb69e291f1f8b33", "format-version": 4, "code-base-name": "question_answering_backend", "filename": "question_answering_backend/api/nlp_mapping.py", "fields": [{"name": "neo4j_service = Neo4jService()", "scope": "", "scopeKind": "", "description": "unavailable"}]}