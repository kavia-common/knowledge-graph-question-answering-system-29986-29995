{"is_source_file": true, "format": "Python", "description": "This Python source file defines a module for mapping natural language questions to Cypher queries, focusing on entities related to cricket player Sachin Tendulkar and general NLP utilities. It includes classes, functions, and embedded query templates for a rule-based question-answering system tailored for a knowledge graph.", "external_files": ["dataclasses", "typing"], "external_methods": ["dataclasses.dataclass"], "published": ["CypherQuery", "RuleBasedNLPMappings"], "classes": [{"name": "CypherQuery", "description": "Represents a Cypher query string along with its parameters, used to encapsulate a query result from the NLP mapping utility."}, {"name": "RuleBasedNLPMappings", "description": "Provides rule-based methods to map natural language questions into Cypher queries, including patterns specific to cricket and general questions about persons."}], "methods": [{"name": "List[str] _normalize_person_input(self, person: str)", "description": "Normalizes a person's name string into a list of plausible aliases for matching.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "str _person_where_clause(self, field: str = \"p\")", "description": "Generates a Cypher WHERE clause for matching persons by name, full_name, or nickname, supporting both single and multiple name parameters.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "Optional[CypherQuery] map_question(self, question: str, top_k: int = 10)", "description": "Main method to convert a natural language question into a CypherQuery object using pattern matching and heuristics.", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"name": "Optional[str] _extract_format(text: str)", "scope": "RuleBasedNLPMappings.map_question", "scopeKind": "member", "description": "unavailable"}], "calls": ["self._normalize_person_input", "self._person_where_clause", "q.startswith", "q.endswith", "q.strip", "q.lower", "q.contains", "q in {", "q ==", "replacements in map_question for pattern detection and query construction"], "search-terms": ["nlp mapping", "cypher query generator", "cricket player queries", "Sachin Tendulkar questions", "rule-based NLP", "question to Cypher", "natural language to graph queries"], "state": 2, "file_id": 20, "knowledge_revision": 89, "git_revision": "e0d66a75b41123b4df7d6fac9416d1197da92fec", "revision_history": [{"41": ""}, {"54": ""}, {"57": "bf534d804d74f8d170c146a9e8434bd403e19fff"}, {"63": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"64": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"65": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"66": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"67": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"68": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"69": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"70": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"71": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"72": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"73": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"74": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"75": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"76": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"77": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"78": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"79": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"80": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"81": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"82": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"83": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"84": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"85": "d393cb1f25020c0e36df0952242462e273e9b77f"}, {"86": "3d0424a067cee0238c039217e9e199b8397659cb"}, {"88": "3d0424a067cee0238c039217e9e199b8397659cb"}, {"89": "e0d66a75b41123b4df7d6fac9416d1197da92fec"}], "ctags": [{"_type": "tag", "name": "CypherQuery", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class CypherQuery:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RuleBasedNLPMappings", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^class RuleBasedNLPMappings:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_extract_format", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^        def _extract_format(text: str) -> Optional[str]:$/", "file": true, "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(text: str)", "scope": "RuleBasedNLPMappings.map_question", "scopeKind": "member"}, {"_type": "tag", "name": "_normalize_person_input", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _normalize_person_input(self, person: str) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "member", "signature": "(self, person: str)", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"_type": "tag", "name": "_person_where_clause", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def _person_where_clause(self, field: str = \"p\") -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, field: str = \"p\")", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}, {"_type": "tag", "name": "map_question", "path": "/home/kavia/workspace/code-generation/knowledge-graph-question-answering-system-29986-29995/question_answering_backend/api/nlp_mapping.py", "pattern": "/^    def map_question(self, question: str, top_k: int = 10) -> Optional[CypherQuery]:$/", "language": "Python", "typeref": "typename:Optional[CypherQuery]", "kind": "member", "signature": "(self, question: str, top_k: int = 10)", "scope": "RuleBasedNLPMappings", "scopeKind": "class"}], "hash": "b67d263fa8e3e374f4c70866ef24f7be", "format-version": 4, "code-base-name": "question_answering_backend", "filename": "question_answering_backend/api/nlp_mapping.py"}